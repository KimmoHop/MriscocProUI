name: Build Configs

on:
  release:
    types: [created]

  workflow_dispatch:

jobs:
  Build-Default:
    name: Build Default Files
    runs-on: ubuntu-latest
    strategy:
      matrix:
        chip: [GD32,N32]
    steps:
    - uses: actions/checkout@v2
    - name: Cache pip
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Cache PlatformIO
      uses: actions/cache@v3
      with:
        path: ~/.platformio
        key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}
    - name: Set up Python
      uses: actions/setup-python@v3
    - name: Install PlatformIO
      run: |
        python3 -m pip install --upgrade pip
        pip install --upgrade wheel
        pip install --upgrade platformio
    - name: Run PlatformIO
      id: build_configs
      run: |
        if [ "$AQUILA_VER" = GD32 ]; then AVTMP="GD32"; else AVTMP="N32"; fi;
        echo "filename=ProUI-Default-NP-${AVTMP}.bin" >> $GITHUB_OUTPUT
        cp configurations/Voxelab\ Aquila/Default-NP/Configuration.h Marlin/Configuration.h
        cp configurations/Voxelab\ Aquila/Default-NP/Configuration_adv.h Marlin/Configuration_adv.h
        cp configurations/Voxelab\ Aquila/Default-NP/Version.h Marlin/Version.h
        sed -i "s/default_envs =.*/default_envs = STM32F103RC_voxelab_maple_$AQUILA_VER/g" platformio.ini
        pio run
        mkdir temp
        mv .pio/build/STM32F103RC_voxelab_maple_$AQUILA_VER/*.bin temp/build.bin
      env:
        AQUILA_VER: ${{ matrix.chip }}
    - name: Get release
      id: get_release
      uses: bruceadams/get-release@v1.3.2
      env:
        GITHUB_TOKEN: ${{ github.token }}
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1.0.2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release.outputs.upload_url }}
        asset_path: temp/build.bin
        asset_name: ${{ steps.build_configs.outputs.filename }}
        asset_content_type: application/x-binary
  # Build-BLTouch:
  #   name: Build BL-Touch Files
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       chip: [GD32,N32]
  #       grid: [3,4,5,9]
  #       highspeed: [true,false]
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: Cache pip
  #     uses: actions/cache@v3
  #     with:
  #       path: ~/.cache/pip
  #       key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
  #       restore-keys: |
  #         ${{ runner.os }}-pip-
  #   - name: Cache PlatformIO
  #     uses: actions/cache@v3
  #     with:
  #       path: ~/.platformio
  #       key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}
  #   - name: Set up Python
  #     uses: actions/setup-python@v3
  #   - name: Install PlatformIO
  #     run: |
  #       python -m pip install --upgrade pip
  #       pip install --upgrade platformio
  #   - name: Run PlatformIO
  #     id: build_configs
  #     run: |
  #       if ($HS); then ISTMP=-HS; else ISTMP=; fi;
  #       if [ "$AQUILA_VER" = GD32 ]; then AVTMP="GD32"; else AVTMP="N32"; fi;
  #       echo "::set-output name=filename::BLTouch-${GRID}x${GRID}${ISTMP}-${AVTMP}.bin"
  #       cp Configuration\ Files/Aquila\ Templates/BLTouch-3x3/Configuration.h Marlin/Configuration.h
  #       cp Configuration\ Files/Aquila\ Templates/BLTouch-3x3/Configuration_adv.h Marlin/Configuration_adv.h
  #       sed -i "s/default_envs =.*/default_envs = STM32F103RC_voxelab_maple_$AQUILA_VER/g" platformio.ini
  #       sed -i "s/#define GRID_MAX_POINTS_X.*/#define GRID_MAX_POINTS_X $GRID/g" Marlin/Configuration.h
  #       if ($HS); then TEMP=; else TEMP='\/\/'; fi;
  #       sed -i "s/[^ ]*#define BLTOUCH_HS_MODE/$TEMP#define BLTOUCH_HS_MODE/g" Marlin/Configuration_adv.h
  #       pio run
  #       mkdir temp
  #       mv .pio/build/STM32F103RC_voxelab_maple_$AQUILA_VER/*.bin temp/build.bin
  #     env:
  #       AQUILA_VER: ${{ matrix.chip }}
  #       GRID: ${{ matrix.grid }}
  #       HS: ${{ matrix.highspeed }}
  #   - name: Get release
  #     id: get_release
  #     uses: bruceadams/get-release@v1.3.2
  #     env:
  #       GITHUB_TOKEN: ${{ github.token }}
  #   - name: Upload Release Asset
  #     uses: actions/upload-release-asset@v1
  #     env:
  #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #     with:
  #       upload_url: ${{ steps.get_release.outputs.upload_url }}
  #       asset_path: temp/build.bin
  #       asset_name: ${{ steps.build_configs.outputs.filename }}
  #       asset_content_type: application/x-binary
  Build-Manual-Mesh:
    name: Build Manual-Mesh Files
    runs-on: ubuntu-latest
    strategy:
      matrix:
        chip: [GD32,N32]
        grid: [3,5,7]
    steps:
    - uses: actions/checkout@v2
    - name: Cache pip
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Cache PlatformIO
      uses: actions/cache@v3
      with:
        path: ~/.platformio
        key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}
    - name: Set up Python
      uses: actions/setup-python@v3
    - name: Install PlatformIO
      run: |
        python3 -m pip install --upgrade pip
        pip install --upgrade wheel
        pip install --upgrade platformio
    - name: Run PlatformIO
      id: build_configs
      run: |
        if [ "$AQUILA_VER" = GD32 ]; then AVTMP="GD32"; else AVTMP="N32"; fi;
        echo "filename=ProUI-MM-${GRID}x${GRID}-${AVTMP}.bin" >> $GITHUB_OUTPUT
        cp configurations/Voxelab\ Aquila/MM/Configuration.h Marlin/Configuration.h
        cp configurations/Voxelab\ Aquila/MM/Configuration_adv.h Marlin/Configuration_adv.h
        cp configurations/Voxelab\ Aquila/MM/Version.h Marlin/Version.h
        sed -i "s/default_envs =.*/default_envs = STM32F103RC_voxelab_maple_$AQUILA_VER/g" platformio.ini
        sed -i "s/#define GRID_MAX_POINTS_X.*/#define GRID_MAX_POINTS_X $GRID/g" Marlin/Configuration.h
        pio run
        mkdir temp
        mv .pio/build/STM32F103RC_voxelab_maple_$AQUILA_VER/*.bin temp/build.bin
      env:
        AQUILA_VER: ${{ matrix.chip }}
        GRID: ${{ matrix.grid }}
    - name: Get release
      id: get_release
      uses: bruceadams/get-release@v1.3.2
      env:
        GITHUB_TOKEN: ${{ github.token }}
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1.0.2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release.outputs.upload_url }}
        asset_path: temp/build.bin
        asset_name: ${{ steps.build_configs.outputs.filename }}
        asset_content_type: application/x-binary
  Build-UBL-BLTouch:
    name: Build BL-Touch UBL Files
    runs-on: ubuntu-latest
    strategy:
      matrix:
        chip: [GD32,N32]
        grid: [5,7]
        inshape: [true,false]
    steps:
    - uses: actions/checkout@v2
    - name: Cache pip
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Cache PlatformIO
      uses: actions/cache@v3
      with:
        path: ~/.platformio
        key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}
    - name: Set up Python
      uses: actions/setup-python@v3
    - name: Install PlatformIO
      run: |
        python3 -m pip install --upgrade pip
        pip install --upgrade wheel
        pip install --upgrade platformio
    - name: Run PlatformIO
      id: build_configs
      run: |
        if ($IS); then ISTMP=-IS; else ISTMP=; fi;
        if [ "$AQUILA_VER" = GD32 ]; then AVTMP="GD32"; else AVTMP="N32"; fi;
        echo "filename=ProUI-UBL-${GRID}x${GRID}${ISTMP}-${AVTMP}.bin" >> $GITHUB_OUTPUT
        cp configurations/Voxelab\ Aquila/UBL/Configuration\ Pro.h Marlin/Configuration.h
        cp configurations/Voxelab\ Aquila/UBL/Configuration_adv\ Pro.h Marlin/Configuration_adv.h
        cp configurations/Voxelab\ Aquila/UBL/Version.h Marlin/Version.h
        sed -i "s/default_envs =.*/default_envs = STM32F103RC_voxelab_maple_$AQUILA_VER/g" platformio.ini
        sed -i "s/#define GRID_MAX_POINTS_X.*/#define GRID_MAX_POINTS_X $GRID/g" Marlin/Configuration.h
        if ($HS); then TEMP=; else TEMP='\/\/'; fi;
        sed -i "s/[^ ]*#define INPUT_SHAPING_X/$TEMP#define INPUT_SHAPING_X/g" Marlin/Configuration_adv.h
        sed -i "s/[^ ]*#define INPUT_SHAPING_Y/$TEMP#define INPUT_SHAPING_Y/g" Marlin/Configuration_adv.h
        pio run
        mkdir temp
        mv .pio/build/STM32F103RC_voxelab_maple_$AQUILA_VER/*.bin temp/build.bin
      env:
        AQUILA_VER: ${{ matrix.chip }}
        GRID: ${{ matrix.grid }}
        IS: ${{ matrix.inshape }}
    - name: Get release
      id: get_release
      uses: bruceadams/get-release@v1.3.2
      env:
        GITHUB_TOKEN: ${{ github.token }}
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1.0.2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release.outputs.upload_url }}
        asset_path: temp/build.bin
        asset_name: ${{ steps.build_configs.outputs.filename }}
        asset_content_type: application/x-binary
  # Build-UBL-NoProbe:
  #   name: Build NoProbe UBL Files
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       chip: [GD32,N32]
  #       grid: [3,5]
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: Cache pip
  #     uses: actions/cache@v3
  #     with:
  #       path: ~/.cache/pip
  #       key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
  #       restore-keys: |
  #         ${{ runner.os }}-pip-
  #   - name: Cache PlatformIO
  #     uses: actions/cache@v3
  #     with:
  #       path: ~/.platformio
  #       key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}
  #   - name: Set up Python
  #     uses: actions/setup-python@v3
  #   - name: Install PlatformIO
  #     run: |
  #       python -m pip install --upgrade pip
  #       pip install --upgrade platformio
  #   - name: Run PlatformIO
  #     id: build_configs
  #     run: |
  #       if [ "$AQUILA_VER" = GD32 ]; then AVTMP="GD32"; else AVTMP="N32"; fi;
  #       echo "::set-output name=filename::UBL-NoProbe-${GRID}x${GRID}-${AVTMP}.bin"
  #       cp Configuration\ Files/Aquila\ Templates/UBL-NoProbe-3x3/Configuration.h Marlin/Configuration.h
  #       cp Configuration\ Files/Aquila\ Templates/UBL-NoProbe-3x3/Configuration_adv.h Marlin/Configuration_adv.h
  #       sed -i "s/default_envs =.*/default_envs = STM32F103RC_voxelab_maple_$AQUILA_VER/g" platformio.ini
  #       sed -i "s/#define GRID_MAX_POINTS_X.*/#define GRID_MAX_POINTS_X $GRID/g" Marlin/Configuration.h
  #       pio run
  #       mkdir temp
  #       mv .pio/build/STM32F103RC_voxelab_maple_$AQUILA_VER/*.bin temp/build.bin
  #     env:
  #       AQUILA_VER: ${{ matrix.chip }}
  #       GRID: ${{ matrix.grid }}
  #   - name: Get release
  #     id: get_release
  #     uses: bruceadams/get-release@v1.3.2
  #     env:
  #       GITHUB_TOKEN: ${{ github.token }}
  #   - name: Upload Release Asset
  #     uses: actions/upload-release-asset@v1
  #     env:
  #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #     with:
  #       upload_url: ${{ steps.get_release.outputs.upload_url }}
  #       asset_path: temp/build.bin
  #       asset_name: ${{ steps.build_configs.outputs.filename }}
  #       asset_content_type: application/x-binary